class uTimer(object):
    def __init__(self, format_string):
        self.format_string = format_string
        
    def __enter__(self):
        self.begin_time=time.time()
        self.end_time=0.0
        self.delta=0.0
        
    def __exit__(self, type, value, tb):
        self.end_time=time.time()
        self.delta = self.end_time - self.begin_time
        print self.format_string % self.delta
        
        
        
        

xml-config goes into the following directory paths
\\h1-chdevws13\www\*clientname\*BDS68\*MarketingCenter\website
\\h1-chdevws13\www\*clientname\*BDS68\*MarketingCenter\
and checks for a web.config file, if one exists, it searches for the 'SMTPServer="*"' parameter and replaces it with 'SMTPServer="*"'. 

Things to add later: parallelism, web.bak backups, user definable paths, CLI or GUI interface
 

    <ApplicationInfo SMTPServer="internal.hubbardone.net" SMTPUseNetworkDelivery="true" Environment="dev" LicenseServer="http://h1-chbuildpt3/LicenseServer/WebService/licenseserver.asmx" ProxyAddress="webproxy.int.westgroup.com" AppPath="" RootUrl="dev13.hubbardone.net:8087" Protocol="http" WebCenterUrl="http://dev13.hubbardone.net:8087/" ShowPortletErrors="true" MatterDataWebService="http://chqapt2:9098/MatterDataService.asmx?op=GetMatterDataByMatterNumber" WordWebService="http://chqapt2:9102/wordservice.asmx" WordWebServiceTimeout="100" WordWebServiceEnablePreCache="true" InstanceID="01" />

 

    <publisher mode="on" assembly="Bds.Arch" type="Bds.Arch.ExceptionManagement.ConnectPublisher" applicationName="Bedells_BDS MarketingCenter (8941) (dev11.hubbardone.net:8941)" sender="webmaster@hubbardone.com" recipients="errorlogdev@hubbardone.com" SMTPServer="internal.hubbardone.net" truncateFormValuesAt="50" />
    
    
---------------------------
Example from IRC    
    
from glob import iglob
from sys import exit

rootdir = r'\\h1-chdevws13\www'

def update():
    # if you are going to do 'form glob import iglob', you call it using just 'iglob(*path*)'
    # the and would make it show only paths with both path

    # iglob is like a make as you go list thing... i think, but making the list before hand might be better
    for l in iglob(rootdir + r"\*\*\website\" and rootdir + r"\*\*\"): # i think you might need to add a * at end of path like below
         if 'web.config' in l: # you could also use if l.endswith('web.config')
             #do stuffs


update()

####################
# i would do it like this though:
####################

import glob
#from sys import exit #not really use atm

rootdir = r'\\h1-chdevws13\www'

def update():

    # make/reset list
    list = []

    # merge list
    list += glob.glob(rootdir + r"\*\*\website\*") # make a list of files (and folders) in website
    list += glob.glob(rootdir + r"\*\*\*") # make a list of files and folders in all folder in www with 3 sub-dir
    for l in list:
        if 'web.config' in l:
            #do stuffs


update()


------------------------------
Full version from asl

import glob
#from sys import exit #not really use atm

def update(rootdir, new_string):

    # make/reset list
    list = []
    other_list = []

    # merge list
    list += glob.glob(rootdir + r"\*\*\*arketing*enter\*eb*ite\*") # make a list of files (and folders) in website
    list += glob.glob(rootdir + r"\*\*\*arketing*enter\*") # make a list of files and folders in all folder in www with 3 sub-dir
    for l in list: # for each file
        if l.endswith('web.config'): # if it end with web.config
            raw = open(l,"r") # open file
            string = raw.readlines() # read file
            raw.close() # close file
            other_list = []
            for a in string:
                data = a.split() # split it into a list so that it easier to find the string
                for t in data: # for each split
                    if "SMTPServer" in t: # if SMTPServer in the split
                        l = l.split("'")[1] # split it and take the string to be replace
                        a.replace(l,new_string) # replace with new string
                other_list.append(a)
            raw = open(l,"w") # open file
            raw.write("".join(other_list)) # finally overwrite/update the file with the new string
            raw.close() # close file


print("xml-kinfig\nEnter servername eg. 'h1-chdevws13' without quotes")
server_string = input("Enter servername: ")
rootdir =  r'\\' + server_string + r'\www'
new_string = input("Enter new SMTP value: ")
update(rootdir, new_string)

